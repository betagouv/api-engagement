name: Deploy to Scaleway

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  set-env:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment_name: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Set environment based on input or branch
        id: set-env
        env:
          HEAD_BRANCH: ${{ inputs.branch || github.ref_name }}
        run: |
          if [[ "$HEAD_BRANCH" == 'main-test' ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Deploy to Scaleway
    needs: set-env
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.set-env.outputs.environment_name }}
      url: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Scaleway credentials
        uses: scaleway/action-scw@v0
        with:
          access-key: ${{ secrets.SCW_ACCESS_KEY }}
          secret-key: ${{ secrets.SCW_SECRET_KEY }}
          project-id: ${{ secrets.SCW_PROJECT_ID }}

      # AWS_ env are required for the S3 backend, with scaleway credentials
      # See https://registry.terraform.io/providers/scaleway/scaleway/latest/docs#store-terraform-state-on-scaleway-s3-compatible-object-storage
      - name: Export Scaleway environment variables
        run: |
          echo "SCW_ACCESS_KEY=${{ secrets.SCW_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "SCW_SECRET_KEY=${{ secrets.SCW_SECRET_KEY }}" >> $GITHUB_ENV
          echo "SCW_DEFAULT_PROJECT_ID=${{ secrets.SCW_PROJECT_ID }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.SCW_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.SCW_SECRET_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_project_id=${{ secrets.SCW_PROJECT_ID }}" >> $GITHUB_ENV

      - name: Set image tag from workflow_run
        id: get-tag
        env:
          GITHUB_SHA: ${{ github.event.workflow_run.head_sha || github.sha }}
        run: |
          echo "image_tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT
          echo "Using image tag: ${GITHUB_SHA::7}"
          echo "Environment: ${{ needs.set-env.outputs.environment_name }}"
          echo "Will use images tagged as: ${{ needs.set-env.outputs.environment_name }}-${GITHUB_SHA::7}"

      - name: Terraform Init
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="bucket=api-engagement-terraform-state-${{ needs.set-env.outputs.environment_name }}" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="endpoint=https://s3.fr-par.scw.cloud" \
            -backend-config="region=fr-par" \
            -backend-config="skip_credentials_validation=true" \
            -backend-config="skip_region_validation=true" \
            -backend-config="skip_metadata_api_check=true"

      - name: Terraform Workspace
        working-directory: ./terraform
        run: terraform workspace select "${{ needs.set-env.outputs.environment_name }}" || terraform workspace new "${{ needs.set-env.outputs.environment_name }}"

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -var="image_tag=${{ steps.get-tag.outputs.image_tag }}" -var="project_id=${{ secrets.SCW_PROJECT_ID }}" -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Output Deployment URLs
        working-directory: ./terraform
        run: |
          echo "API Endpoint: $(terraform output -raw api_endpoint)"
          echo "App Endpoint: $(terraform output -raw app_endpoint)"
          echo "Process Endpoint: $(terraform output -raw process_endpoint)"
          echo "Benevolat Widget Endpoint: $(terraform output -raw benevolat_endpoint)"
          echo "Volontariat Widget Endpoint: $(terraform output -raw volontariat_endpoint)"
