name: Tests

on:
  # push:
  pull_request:
  workflow_dispatch:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string

permissions:
  contents: read

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      widget: ${{ steps.filter.outputs.widget }}
    steps:
      - uses: actions/checkout@v5
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            api:
              - 'api/**'
            widget:
              - 'widget/**'

  api-migrations:
    name: Verify API migrations
    needs: changes
    if: needs.changes.outputs.api == 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v5
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "api/package-lock.json"

      - name: Install dependencies
        run: cd api && npm ci

      - name: Prepare temporary databases
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -d postgres -c 'CREATE DATABASE core;'
          psql -h localhost -U postgres -d postgres -c 'CREATE DATABASE analytics;'

      - name: Check Prisma migrations
        working-directory: api
        env:
          DATABASE_URL_CORE: postgresql://postgres:postgres@localhost:5432/core
          DATABASE_URL_ANALYTICS: postgresql://postgres:postgres@localhost:5432/analytics
        run: npm run prisma:migrate:deploy

  api-tests:
    name: API Tests
    needs:
      - changes
      - api-migrations
    if: needs.changes.outputs.api == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v6
        with:
          context: ./api
          file: ./api/Dockerfile
          load: true
          tags: api-test:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run tests
        run: docker run --rm api-test:latest npm run test:ci

  widgets-tests:
    name: Widget Tests
    needs: changes
    if: needs.changes.outputs.widget == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    steps:
      - uses: actions/checkout@v5

      - name: Use Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "18.x"
          cache: "npm"
          cache-dependency-path: "widget/package-lock.json"

      - name: Install dependencies
        run: cd widget && npm ci

      - name: Install Playwright browsers and dependencies
        run: cd widget && npx playwright install --with-deps

      - name: Run tests
        run: cd widget && npm run test:e2e

      - name: Upload HTML test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: widget/tests/e2e/_playwright-report
          retention-days: 30
